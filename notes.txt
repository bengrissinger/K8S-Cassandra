#links for setting up cassandra as a replica on K8S both with local volumes and PX

https://github.com/IBM/Scalable-Cassandra-deployment-on-Kubernetes#1-create-a-cassandra-headless-service
https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/
https://kubernetes.io/docs/tasks/run-application/run-replicated-stateful-application/#statefulset
https://github.com/vyshane/cassandra-kubernetes/blob/master/cassandra-peer-service.yml
https://kubernetes.io/docs/tutorials/stateful-application/cassandra/
http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/initialize/initializeSingleDS.html
https://blog.alexellis.io/kubernetes-in-10-minutes/

#settting up cassandra and data loading steps

# snitch (DC1) etc
https://www.vskills.in/certification/tutorial/big-data/apache-cassandra/replication-with-gossip-protocol/
https://docs.datastax.com/en/cassandra/2.1/cassandra/architecture/architectureSnitchGossipPF_c.html?hl=gossipingpropertyfilesnitch
http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/initialize/initializeSingleDS.html



su - <user>
export KUBECONFIG=$HOME/admin.conf

# when trying to do perfomance tests - 

https://docs.portworx.com/applications/cassandra-px-perf-test.html
https://docs.datastax.com/en/cassandra/2.1/cassandra/tools/toolsCStress_t.html

mixed n=100 cl=one -mode native cql3 -rate threads\>=16 -schema -pop seq=1..1000  -node ${NODE_1_IP},${NODE_2_IP},${NODE_3_IP}



#kubectl get pods
export NODE_3_IP=10.244.1.21&&export NODE_2_IP=10.244.2.16&&^Cport NODE_1_IP=10.244.0.18 (this has to be done on all 3 nodes)

# kubectl exec cassandra-7gfkz -- nodetool status
You should see all cassanra rings, not just one.  If notthen your gossip  snitch settings need updated
bgrissin@cassandra1:~$ kubectl get pods
NAME              READY     STATUS    RESTARTS   AGE
cassandra-7gfkz   1/1       Running   0          25m
cassandra-hfcmr   1/1       Running   0          25m
bgrissin@cassandra1:~$ kubectl exec cassandra-7gfkz -- nodetool status
Datacenter: DC1
===============
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address      Load       Tokens       Owns (effective)  Host ID                               Rack
DN  10.244.3.52  7.42 MB    256          100.0%            a2978b29-12b1-4725-9676-c460e5b8c6d1  Rack1
UN  10.244.2.64  7.43 MB    256          100.0%            bf6251c9-4df3-465f-a14d-56d63eaf6b4c  Rack1




# setting up storage on packet

packet-block-storage-attach -m queue
multipath -ll
fdisk /dev/dm-0
kpartx -u /dev/mapper/volume-d9bc26f9-part - save the reboot!  this comes from fdisk show partitions
sudo mkfs.ext4 /dev/mapper/volume-d9bc26f9-part - put a fS on the new partition if your trying to mount a local volume (do not do for PX!)
mount /dev/dm-1 /var/lib/cassandra/data  -  always try to leave dm-0 for PX
umount /var/lib/cassandra/data only if your done using the local volumes
rm -fR /var/lib/cassandra/data - after every test do this to refresh everything

#Useful K8S commands for diff service types

kubectl get sv
kubectl get sc
kubectl get pv
kubectl get pvc

# etcd setup
# remember - do not use k8s cluster etcd, setup a seperate etcd recommend etcd on each node , 
# dont forget to add all etcd endpoints into px-spec.yaml

etcdctl member remove 7fc7e3efb5542868
etcdctl member list

Setting up etcd (separate etcd from k8s)  using different ports and embed IPs for each host where appropriate



docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2381:2381 -p 2378:2378  --name etcd quay.io/coreos/etcd:v2.3.8  -name etcd1  -advertise-client-urls http://10.100.26.7:2378,http://10.100.26.7:4001  -listen-client-urls http://0.0.0.0:2378,http://0.0.0.0:4001  -initial-advertise-peer-urls http://10.100.26.7:2381  -listen-peer-urls http://0.0.0.0:2381  -initial-cluster-token px-etcd-cluster  -initial-cluster etcd1=http://10.100.26.7:2381,etcd2=http://10.100.26.3:2381,etcd3=http://10.100.26.1:2381  -initial-cluster-state new

docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2381:2381 -p 2378:2378  --name etcd quay.io/coreos/etcd:v2.3.8 -name etcd2 -advertise-client-urls http://10.100.26.3:2378,http://10.100.26.3:4001  -listen-client-urls http://0.0.0.0:2378,http://0.0.0.0:4001  -initial-advertise-peer-urls http://10.100.26.3:2381  -listen-peer-urls http://0.0.0.0:2381  -initial-cluster-token px-etcd-cluster  -initial-cluster etcd1=http://10.100.26.7:2381,etcd2=http://10.100.26.3:2381,etcd3=http://10.100.26.1:2381  -initial-cluster-state new

docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2381:2381 -p 2378:2378  --name etcd quay.io/coreos/etcd:v2.3.8 -name etcd3 -advertise-client-urls http://10.100.26.1:2378,http://10.100.26.1:4001  -listen-client-urls http://0.0.0.0:2378,http://0.0.0.0:4001  -initial-advertise-peer-urls http://10.100.26.1:2381  -listen-peer-urls http://0.0.0.0:2381  -initial-cluster-token px-etcd-cluster  -initial-cluster etcd1=http://10.100.26.7:2381,etcd2=http://10.100.26.3:2381,etcd3=http://10.100.26.1:2381  -initial-cluster-state new




you can immediately curl your endpoints

curl http://10.100.26.7:2378/v2/members


{"members":[{"id":"2c2b40b2009a6106","name":"etcd3","peerURLs":["http://10.100.26.1:2381"],"clientURLs":["http://10.100.26.1:2378","http://10.100.26.1:4001"]},{"id":"7fc7e3efb5542868","name":"etcd2","peerURLs":["http://10.100.26.3:2381"],"clientURLs":["http://10.100.26.3:2378","http://10.100.26.3:4001"]},{"id":"f32295d3df76e26e","name":"etcd1","peerURLs":["http://10.100.26.7:2381"],"clientURLs":["http://10.100.26.7:2378","http://10.100.26.7:4001"]}]}

or you can export your env to point to the ectd cluster

bgrissin@cassandra1:~$ export ETCDCTL_ENDPOINT=http://10.1000.26.7:237,http://10.100.26.1:2378,http://10.100.26.3:2378
bgrissin@cassandra1:~$ etcdctl member list
2c2b40b2009a6106: name=etcd3 peerURLs=http://10.100.26.1:2381 clientURLs=http://10.100.26.1:2378,http://10.100.26.1:4001
7fc7e3efb5542868: name=etcd2 peerURLs=http://10.100.26.3:2381 clientURLs=http://10.100.26.3:2378,http://10.100.26.3:4001
f32295d3df76e26e: name=etcd1 peerURLs=http://10.100.26.7:2381 clientURLs=http://10.100.26.7:2378,http://10.100.26.7:4001
bgrissin@cassandra1:~$



install of px 

curl -o px-spec.yaml "http://install.portworx.com?cluster=my-px-cluster&kvdb=etcd://10.100.26.1:2378,etcd://10.100.26.7:2378,etcd://10.100.26.3:2378&drives=/dev/dm-0&diface=bond0:0&miface=bond0:0&master=true"

 
